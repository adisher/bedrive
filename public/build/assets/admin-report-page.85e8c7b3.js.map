{"version":3,"mappings":"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","names":["Endpoint","payload","fetchAnalyticsReport","params","types","dateRange","apiClient","response","ChartLayout","props","title","description","children","className","contentIsFlex","contentClassName","contentRef","minHeight","clsx","_jsx","ChartLoadingIndicator","ProgressCircle","Trans","LazyChart","lazy","__vitePreload","BaseChart","isLoading","Suspense","formatReportData","report","firstDatasetLabels","dataset","datasetIndex","data","datasetItem","itemIndex","shareFirstDatasetLabels","label","localeCode","generateDatasetLabels","datum","granularity","locale","generateTimeLabels","isoDate","isoEndDate","date","parseAbsoluteToLocal","endDate","getFormatter","memoize","options","DateFormatter","a","b","shallowEqual","primaryColor","getBootstrapData","themes","all","colors","ChartColors","replaceAll","LineChartOptions","parsing","xAxisKey","yAxisKey","datasets","line","fill","tension","pointBorderWidth","pointHitRadius","plugins","tooltip","intersect","mode","LineChart","useSelectedLocale","formattedData","useMemo","map","i","backgroundColor","borderColor","pointBackgroundColor","PolarAreaChartOptions","key","PolarAreaChart","labels","d","c","borderWidth","BarChart","direction","individualBarColors","isHorizontal","indexAxis","loaderUrl","useGoogleGeoChart","useTrans","useSettings","apiKey","analytics","useThemeSelector","geoChartRef","useRef","regionInteractivity","onCountrySelected","country","drawGoogleChart","useCallback","location","seedData","trans","message","themeValueToHex","selectedTheme","placeholderRef","_a","_b","initGoogleGeoChart","lazyLoader","useEffect","InfoDialogTriggerIcon","createSvgIcon","InfoDialogTrigger","body","dialogSize","DialogTrigger","IconButton","_jsxs","Dialog","DialogHeader","DialogBody","FormattedCountryName","memo","code","countryCode","regionNames","Intl","DisplayNames","type","formattedName","of","toUpperCase","Fragment","GeoChart","metricData","layoutProps","initialData","InfoTrigger","undefined","percentage","Button","ArrowBackIcon","AdminReportPageColGap","rowClassName","VisitorsReportCharts","totalViews","pageViews","total","count","FormattedNumber","devices","browsers","locations","AdminHeaderReport","FormattedDateTimeRange","start","end","ValueMetricItem","name","Icon","createSvgIconFromTree","icon","FormattedBytes","currentValue","percentageChange","TrendingIndicator","TrendingUpIcon","TrendingFlatIcon","TrendingDownIcon","monthDayFormat","month","day","ReportDateSelector","value","onChange","compactOnMobile","isMobile","useIsMobileMediaQuery","DateRangeIcon","DateFormatPresets","short","DateSelectorDialog","state","useDateRangePickerState","defaultValue","closeDialogOnSelection","DateRangeDialog","AdminReportPage","setDateRange","useState","DateRangePresets","getRangeValue","useAdminReport","StaticPageTitle","headerReport","visitorsReport"],"sources":["../../../common/resources/client/admin/analytics/use-admin-report.ts","../../../common/resources/client/charts/chart-layout.tsx","../../../common/resources/client/charts/chart-loading-indicator.tsx","../../../common/resources/client/charts/base-chart.tsx","../../../common/resources/client/charts/data/format-report-data.ts","../../../common/resources/client/charts/chart-colors.tsx","../../../common/resources/client/charts/line-chart.tsx","../../../common/resources/client/charts/polar-area-chart.tsx","../../../common/resources/client/charts/bar-chart.tsx","../../../common/resources/client/admin/analytics/geo-chart/use-google-geo-chart.ts","../../../common/resources/client/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon.tsx","../../../common/resources/client/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger.tsx","../../../common/resources/client/i18n/formatted-country-name.tsx","../../../common/resources/client/admin/analytics/geo-chart/geo-chart.tsx","../../../common/resources/client/admin/analytics/visitors-report-charts.tsx","../../../common/resources/client/admin/analytics/admin-header-report.tsx","../../../common/resources/client/admin/analytics/report-date-selector.tsx","../../../common/resources/client/admin/analytics/admin-report-page.tsx"],"sourcesContent":["import {useQuery} from '@tanstack/react-query';\nimport {BackendResponse} from '../../http/backend-response/backend-response';\nimport {apiClient} from '../../http/query-client';\nimport {VisitorsReportData} from './visitors-report-data';\nimport {IconTree} from '../../icons/create-svg-icon';\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\n\nconst Endpoint = 'admin/reports';\n\nexport interface HeaderDatum {\n  icon: IconTree[];\n  name: string;\n  type?: 'number' | 'fileSize';\n  currentValue: number;\n  previousValue?: number;\n  percentageChange?: number;\n}\n\ninterface FetchAnalyticsReportResponse extends BackendResponse {\n  visitorsReport: VisitorsReportData;\n  headerReport: HeaderDatum[];\n}\n\ninterface Payload {\n  types?: ('visitors' | 'header')[];\n  dateRange?: DateRangeValue;\n}\nexport function useAdminReport(payload: Payload = {}) {\n  return useQuery([Endpoint, payload], () => fetchAnalyticsReport(payload), {\n    keepPreviousData: true,\n  });\n}\n\nfunction fetchAnalyticsReport({\n  types,\n  dateRange,\n}: Payload): Promise<FetchAnalyticsReportResponse> {\n  const params: Record<string, any> = {};\n  if (types) {\n    params.types = types.join(',');\n  }\n  if (dateRange) {\n    params.startDate = dateRange.start.toAbsoluteString();\n    params.endDate = dateRange.end.toAbsoluteString();\n    params.timezone = dateRange.start.timeZone;\n  }\n  return apiClient.get(Endpoint, {params}).then(response => response.data);\n}\n","import {ReactNode, Ref} from 'react';\nimport clsx from 'clsx';\n\nexport interface ChartLayoutProps {\n  title: ReactNode;\n  description?: ReactNode;\n  className?: string;\n  children: ReactNode;\n  contentIsFlex?: boolean;\n  contentClassName?: string;\n  minHeight?: string;\n  contentRef?: Ref<HTMLDivElement>;\n  isLoading?: boolean;\n}\nexport function ChartLayout(props: ChartLayoutProps) {\n  const {\n    title,\n    description,\n    children,\n    className,\n    contentIsFlex = true,\n    contentClassName,\n    contentRef,\n    minHeight = 'min-h-440',\n  } = props;\n\n  return (\n    <div\n      className={clsx(\n        'bg border rounded h-full flex flex-col flex-auto',\n        minHeight,\n        className\n      )}\n    >\n      <div className=\"text-xs p-14 flex-shrink-0 flex justify-between items-center\">\n        <div className=\"font-semibold text-sm\">{title}</div>\n        {description && <div className=\"text-muted\">{description}</div>}\n      </div>\n      <div\n        ref={contentRef}\n        className={clsx(\n          'p-14 relative',\n          contentIsFlex && 'flex-auto flex items-center justify-center',\n          contentClassName\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n","import {ProgressCircle} from '@common/ui/progress/progress-circle';\nimport {Trans} from '@common/i18n/trans';\n\nexport function ChartLoadingIndicator() {\n  return (\n    <div className=\"flex items-center gap-10 text-sm absolute mx-auto\">\n      <ProgressCircle isIndeterminate size=\"sm\" />\n      <Trans message=\"Chart loading\" />\n    </div>\n  );\n}\n","import type {ChartData, ChartOptions, ChartType} from 'chart.js';\nimport {lazy, Suspense} from 'react';\nimport {ChartLayout, ChartLayoutProps} from './chart-layout';\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\n\nconst LazyChart = lazy(() => import('./lazy-chart'));\n\nexport interface BaseChartProps<Type extends ChartType = ChartType>\n  extends Omit<ChartLayoutProps, 'children'> {\n  type: Type;\n  data: ChartData<Type, unknown>;\n  options?: ChartOptions<Type>;\n  hideLegend?: boolean;\n}\nexport function BaseChart<Type extends ChartType = ChartType>(\n  props: BaseChartProps<Type>\n) {\n  const {title, description, className, contentRef, isLoading} = props;\n\n  return (\n    <ChartLayout\n      title={title}\n      description={description}\n      className={className}\n      contentRef={contentRef}\n    >\n      <Suspense fallback={<ChartLoadingIndicator />}>\n        <LazyChart {...props} />\n        {isLoading && <ChartLoadingIndicator />}\n      </Suspense>\n    </ChartLayout>\n  );\n}\n","import {DateFormatter, parseAbsoluteToLocal} from '@internationalized/date';\nimport memoize from 'nano-memoize';\nimport {ChartType} from 'chart.js';\nimport {\n  FormattedDatasetItem,\n  FormattedReportData,\n} from './formatted-dataset-item';\nimport {\n  DatasetItem,\n  RangedDatasetGranularity,\n  ReportMetric,\n} from '../../admin/analytics/report-metric';\nimport {shallowEqual} from '../../utils/shallow-equal';\n\ninterface Options {\n  localeCode: string;\n  shareFirstDatasetLabels?: boolean;\n}\n\ntype FormattedDatasetLabels = Omit<FormattedDatasetItem, 'value'>;\n\nexport function formatReportData(\n  report: ReportMetric | undefined,\n  {localeCode = 'en', shareFirstDatasetLabels = true}: Options\n): FormattedReportData {\n  if (!report) return {datasets: []};\n\n  const firstDatasetLabels: FormattedDatasetLabels[] = [];\n\n  return {\n    ...report,\n    datasets: report.datasets.map((dataset, datasetIndex) => {\n      const data = dataset.data.map((datasetItem, itemIndex) => {\n        let label: FormattedDatasetLabels;\n        // when there are multiple datasets, we'll need to use labels from the first dataset, so charts are\n        // overlapped over one another, otherwise they will be side by side, if labels in all datasets are not identical.\n        if (datasetIndex === 0 || !shareFirstDatasetLabels) {\n          label = generateDatasetLabels(\n            datasetItem,\n            report.granularity,\n            localeCode\n          );\n          firstDatasetLabels[itemIndex] = label;\n        } else {\n          label = firstDatasetLabels[itemIndex];\n        }\n        return {\n          ...label,\n          value: datasetItem.value,\n        };\n      });\n\n      return {...dataset, data};\n    }),\n  };\n}\n\nfunction generateDatasetLabels<T extends ChartType = ChartType>(\n  datum: DatasetItem,\n  granularity: RangedDatasetGranularity | undefined,\n  locale: string\n): FormattedDatasetLabels {\n  if (datum.label != null) {\n    return {label: datum.label};\n  }\n\n  if (!datum.date) {\n    return {label: ''};\n  }\n\n  return generateTimeLabels(datum, granularity, locale);\n}\n\nfunction generateTimeLabels(\n  {date: isoDate, endDate: isoEndDate, value}: DatasetItem,\n  granularity: RangedDatasetGranularity | undefined = 'day',\n  locale: string\n): Omit<FormattedDatasetItem, 'value'> {\n  const date = parseAbsoluteToLocal(isoDate).toDate();\n  const endDate = isoEndDate ? parseAbsoluteToLocal(isoEndDate).toDate() : null;\n\n  switch (granularity) {\n    case 'minute':\n      return {\n        label: getFormatter(locale, {\n          second: '2-digit',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          day: '2-digit',\n          hour: 'numeric',\n          minute: 'numeric',\n          second: '2-digit',\n        }).format(date),\n      };\n    case 'hour':\n      return {\n        label: getFormatter(locale, {\n          hour: 'numeric',\n          minute: 'numeric',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          month: 'short',\n          day: '2-digit',\n          hour: 'numeric',\n          minute: 'numeric',\n        }).format(date),\n      };\n    case 'day':\n      return {\n        label: getFormatter(locale, {\n          day: '2-digit',\n          weekday: 'short',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          day: '2-digit',\n          weekday: 'short',\n          month: 'short',\n        }).format(date),\n      };\n    case 'week':\n      return {\n        label: getFormatter(locale, {\n          month: 'short',\n          day: '2-digit',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          day: '2-digit',\n          month: 'long',\n          year: 'numeric',\n        }).formatRange(date, endDate as Date),\n      };\n    case 'month':\n      return {\n        label: getFormatter(locale, {\n          month: 'short',\n          year: 'numeric',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          month: 'long',\n          year: 'numeric',\n        }).format(date),\n      };\n    case 'year':\n      return {\n        label: getFormatter(locale, {\n          year: 'numeric',\n        }).format(date),\n        tooltipTitle: getFormatter(locale, {\n          year: 'numeric',\n        }).format(date),\n      };\n  }\n}\n\nconst getFormatter = memoize(\n  (locale, options: Intl.DateTimeFormatOptions) => {\n    return new DateFormatter(locale, options);\n  },\n  {\n    equals: (a, b) => {\n      return shallowEqual(a, b);\n    },\n    callTimeout: undefined as any,\n  }\n);\n","import {getBootstrapData} from '@common/core/bootstrap-data/use-backend-bootstrap-data';\n\nconst primaryColor = getBootstrapData().themes.all[0].colors['--be-primary'];\nexport const ChartColors = [\n  [\n    `rgb(${primaryColor.replaceAll(' ', ',')})`,\n    `rgba(${primaryColor.replaceAll(' ', ',')},0.2)`,\n  ],\n  ['rgb(255,112,67)', 'rgb(255,112,67,0.2)'],\n  ['rgb(255,167,38)', 'rgb(255,167,38,0.2)'],\n  ['rgb(141,110,99)', 'rgb(141,110,99,0.2)'],\n  ['rgb(102,187,106)', 'rgba(102,187,106,0.2)'],\n  ['rgb(92,107,192)', 'rgb(92,107,192,0.2)'],\n];\n","import {BaseChart, BaseChartProps} from './base-chart';\nimport {ReportMetric} from '../admin/analytics/report-metric';\nimport {useMemo} from 'react';\nimport {formatReportData} from './data/format-report-data';\nimport {useSelectedLocale} from '../i18n/selected-locale';\nimport {ChartData, ChartOptions} from 'chart.js';\nimport {ChartColors} from './chart-colors';\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\nimport clsx from 'clsx';\n\nconst LineChartOptions: ChartOptions<'line'> = {\n  parsing: {\n    xAxisKey: 'label',\n    yAxisKey: 'value',\n  },\n  datasets: {\n    line: {\n      fill: 'origin',\n      tension: 0.1,\n      pointBorderWidth: 4,\n      pointHitRadius: 10,\n    },\n  },\n  plugins: {\n    tooltip: {\n      intersect: false,\n      mode: 'index',\n    },\n  },\n};\n\ninterface LineChartProps extends Omit<BaseChartProps<'line'>, 'type' | 'data'> {\n  data?: ReportMetric;\n}\nexport function LineChart({data, className, ...props}: LineChartProps) {\n  const {localeCode} = useSelectedLocale();\n  const formattedData: ChartData<'line', FormattedDatasetItem[]> =\n    useMemo(() => {\n      const formattedData = formatReportData(data, {localeCode});\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\n        ...dataset,\n        backgroundColor: ChartColors[i][1],\n        borderColor: ChartColors[i][0],\n        pointBackgroundColor: ChartColors[i][0],\n      }));\n      return formattedData;\n    }, [data, localeCode]);\n\n  return (\n    <BaseChart\n      {...props}\n      className={clsx(className, 'min-w-500')}\n      data={formattedData}\n      type=\"line\"\n      options={LineChartOptions}\n    />\n  );\n}\n","import {BaseChart, BaseChartProps} from './base-chart';\nimport {ChartData, ChartOptions} from 'chart.js';\nimport {ChartColors} from './chart-colors';\nimport {useSelectedLocale} from '../i18n/selected-locale';\nimport {useMemo} from 'react';\nimport {formatReportData} from './data/format-report-data';\nimport {ReportMetric} from '../admin/analytics/report-metric';\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\nimport clsx from 'clsx';\n\nconst PolarAreaChartOptions: ChartOptions<'polarArea'> = {\n  parsing: {\n    key: 'value',\n  },\n  plugins: {\n    tooltip: {\n      intersect: true,\n    },\n  },\n};\n\ninterface PolarAreaChartProps\n  extends Omit<BaseChartProps<'polarArea'>, 'type' | 'data'> {\n  data?: ReportMetric;\n}\nexport function PolarAreaChart({\n  data,\n  className,\n  ...props\n}: PolarAreaChartProps) {\n  const {localeCode} = useSelectedLocale();\n  const formattedData: ChartData<'polarArea', FormattedDatasetItem[]> =\n    useMemo(() => {\n      const formattedData = formatReportData(data, {localeCode});\n      formattedData.labels = formattedData.datasets[0]?.data.map(d => d.label);\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\n        ...dataset,\n        backgroundColor: ChartColors.map(c => c[1]),\n        borderColor: ChartColors.map(c => c[0]),\n        borderWidth: 2,\n      }));\n      return formattedData;\n    }, [data, localeCode]);\n\n  return (\n    <BaseChart\n      type=\"polarArea\"\n      data={formattedData}\n      options={PolarAreaChartOptions}\n      className={clsx(className, 'min-w-500')}\n      {...props}\n    />\n  );\n}\n","import {BaseChart, BaseChartProps} from './base-chart';\nimport {ChartData, ChartOptions} from 'chart.js';\nimport {ChartColors} from './chart-colors';\nimport {useSelectedLocale} from '../i18n/selected-locale';\nimport {FormattedDatasetItem} from './data/formatted-dataset-item';\nimport {useMemo} from 'react';\nimport {formatReportData} from './data/format-report-data';\nimport {ReportMetric} from '../admin/analytics/report-metric';\nimport clsx from 'clsx';\n\ninterface BarChartProps extends Omit<BaseChartProps<'bar'>, 'type' | 'data'> {\n  direction?: 'horizontal' | 'vertical';\n  individualBarColors?: boolean;\n  data?: ReportMetric;\n}\nexport function BarChart({\n  data,\n  direction = 'vertical',\n  individualBarColors = false,\n  className,\n  ...props\n}: BarChartProps) {\n  const {localeCode} = useSelectedLocale();\n  const formattedData: ChartData<'bar', FormattedDatasetItem[]> =\n    useMemo(() => {\n      const formattedData = formatReportData(data, {localeCode});\n      formattedData.datasets = formattedData.datasets.map((dataset, i) => ({\n        ...dataset,\n        backgroundColor: individualBarColors\n          ? ChartColors.map(c => c[1])\n          : ChartColors[i][1],\n        borderColor: individualBarColors\n          ? ChartColors.map(c => c[0])\n          : ChartColors[i][0],\n        borderWidth: 2,\n      }));\n      return formattedData;\n    }, [data, localeCode, individualBarColors]);\n\n  const isHorizontal = direction === 'horizontal';\n  const options: ChartOptions<'bar'> = useMemo(() => {\n    return {\n      indexAxis: isHorizontal ? 'y' : 'x',\n      parsing: {\n        xAxisKey: isHorizontal ? 'value' : 'label',\n        yAxisKey: isHorizontal ? 'label' : 'value',\n      },\n    };\n  }, [isHorizontal]);\n\n  return (\n    <BaseChart\n      type=\"bar\"\n      className={clsx(className, 'min-w-500')}\n      data={formattedData}\n      options={options}\n      {...props}\n    />\n  );\n}\n","import lazyLoader from '../../../utils/http/lazy-loader';\nimport {useSettings} from '@common/core/settings/use-settings';\nimport {RefObject, useCallback, useEffect, useRef} from 'react';\nimport {useThemeSelector} from '@common/ui/themes/theme-selector-context';\nimport {themeValueToHex} from '@common/ui/themes/utils/theme-value-to-hex';\nimport {useTrans} from '@common/i18n/use-trans';\nimport {message} from '@common/i18n/message';\nimport {LocationDatasetItem} from '@common/admin/analytics/report-metric';\n\nconst loaderUrl = 'https://www.gstatic.com/charts/loader.js';\n\ninterface UseGoogleGeoChartProps {\n  placeholderRef: RefObject<HTMLDivElement>;\n  data: LocationDatasetItem[];\n  onCountrySelected?: (countryCode: string) => void;\n  country?: string;\n}\nexport function useGoogleGeoChart({\n  placeholderRef,\n  data,\n  country,\n  onCountrySelected,\n}: UseGoogleGeoChartProps) {\n  const {trans} = useTrans();\n  const {analytics} = useSettings();\n  const apiKey = analytics?.gchart_api_key;\n  const {selectedTheme} = useThemeSelector();\n  const geoChartRef = useRef<google.visualization.GeoChart>();\n  // only allow selecting countries, not cities\n  const regionInteractivity = !!onCountrySelected && !country;\n  const drawGoogleChart = useCallback(() => {\n    if (typeof google === 'undefined') return;\n\n    const seedData = data.map(location => [location.label, location.value]);\n    seedData.unshift([\n      country ? trans(message('City')) : trans(message('Country')),\n      trans(message('Clicks')),\n    ]);\n\n    const backgroundColor = `${themeValueToHex(\n      selectedTheme.colors['--be-paper']\n    )}`;\n    const chartColor = `${themeValueToHex(\n      selectedTheme.colors['--be-primary']\n    )}`;\n\n    const options: google.visualization.GeoChartOptions = {\n      colorAxis: {colors: [chartColor]},\n      backgroundColor,\n      region: country ? country.toUpperCase() : undefined,\n      resolution: country ? 'provinces' : 'countries',\n      displayMode: country ? 'markers' : 'regions',\n      enableRegionInteractivity: regionInteractivity,\n    };\n\n    if (\n      !geoChartRef.current &&\n      placeholderRef.current &&\n      google?.visualization?.GeoChart\n    ) {\n      geoChartRef.current = new google.visualization.GeoChart(\n        placeholderRef.current\n      );\n    }\n    geoChartRef.current?.draw(\n      google.visualization.arrayToDataTable(seedData),\n      options\n    );\n  }, [\n    selectedTheme,\n    data,\n    placeholderRef,\n    trans,\n    country,\n    regionInteractivity,\n  ]);\n\n  const initGoogleGeoChart = useCallback(() => {\n    if (lazyLoader.alreadyLoading(loaderUrl)) return;\n    lazyLoader.loadAsset(loaderUrl, {type: 'js'}).then(() => {\n      google.charts.load('current', {\n        packages: ['geochart'],\n        // See: https://developers.google.com/chart/interactive/docs/basic_load_libs#load-settings\n        mapsApiKey: apiKey,\n        callback: () => {\n          drawGoogleChart();\n          if (geoChartRef.current && onCountrySelected) {\n            google.visualization.events.addListener(\n              geoChartRef.current,\n              'regionClick',\n              (a: {region: string}) => {\n                onCountrySelected?.(a.region);\n              }\n            );\n          }\n        },\n      });\n    });\n  }, [apiKey, drawGoogleChart, onCountrySelected]);\n\n  // on component load: load chart library then draw, otherwise just draw\n  useEffect(() => {\n    initGoogleGeoChart();\n  }, [initGoogleGeoChart]);\n\n  // redraw chart if data or theme changes\n  useEffect(() => {\n    drawGoogleChart();\n  }, [selectedTheme, drawGoogleChart, data]);\n\n  return {drawGoogleChart};\n}\n","import {createSvgIcon} from '@common/icons/create-svg-icon';\n\nexport const InfoDialogTriggerIcon = createSvgIcon(\n  <path d=\"M9 8a1 1 0 0 0-1-1H5.5a1 1 0 1 0 0 2H7v4a1 1 0 0 0 2 0zM4 0h8a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4zm4 5.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z\" />,\n  'InfoDialogTrigger'\n);\n","import {IconButton} from '@common/ui/buttons/icon-button';\nimport {InfoDialogTriggerIcon} from '@common/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger-icon';\nimport {Dialog, DialogSize} from '@common/ui/overlays/dialog/dialog';\nimport {DialogHeader} from '@common/ui/overlays/dialog/dialog-header';\nimport {DialogBody} from '@common/ui/overlays/dialog/dialog-body';\nimport {DialogTrigger} from '@common/ui/overlays/dialog/dialog-trigger';\nimport React, {ReactNode} from 'react';\nimport clsx from 'clsx';\n\ninterface InfoDialogTriggerProps {\n  title?: ReactNode;\n  body: ReactNode;\n  dialogSize?: DialogSize;\n  className?: string;\n}\nexport function InfoDialogTrigger({\n  title,\n  body,\n  dialogSize = 'sm',\n  className,\n}: InfoDialogTriggerProps) {\n  return (\n    <DialogTrigger type=\"popover\" triggerOnHover>\n      <IconButton\n        className={clsx('text-muted opacity-70', className)}\n        size=\"xs\"\n      >\n        <InfoDialogTriggerIcon viewBox=\"0 0 16 16\" />\n      </IconButton>\n      <Dialog size={dialogSize}>\n        {title && (\n          <DialogHeader padding=\"px-18 pt-12\" size=\"md\" hideDismissButton>\n            {title}\n          </DialogHeader>\n        )}\n        <DialogBody>{body}</DialogBody>\n      </Dialog>\n    </DialogTrigger>\n  );\n}\n","import {useSelectedLocale} from '@common/i18n/selected-locale';\nimport {Fragment, memo} from 'react';\n\ninterface Props {\n  code: string;\n}\nexport const FormattedCountryName = memo(({code: countryCode}: Props) => {\n  const {localeCode} = useSelectedLocale();\n  const regionNames = new Intl.DisplayNames([localeCode], {type: 'region'});\n  let formattedName: string | undefined;\n\n  try {\n    formattedName = regionNames.of(countryCode.toUpperCase());\n  } catch (e) {}\n\n  return <Fragment>{formattedName}</Fragment>;\n});\n","import {\n  LocationDatasetItem,\n  ReportMetric,\n} from '@common/admin/analytics/report-metric';\nimport React, {useMemo, useRef} from 'react';\nimport {useGoogleGeoChart} from './use-google-geo-chart';\nimport {ChartLayout, ChartLayoutProps} from '@common/charts/chart-layout';\nimport {Trans} from '@common/i18n/trans';\nimport {ChartLoadingIndicator} from '@common/charts/chart-loading-indicator';\nimport {Button} from '@common/ui/buttons/button';\nimport {ArrowBackIcon} from '@common/icons/material/ArrowBack';\nimport clsx from 'clsx';\nimport {InfoDialogTrigger} from '@common/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger';\nimport {FormattedCountryName} from '@common/i18n/formatted-country-name';\n\ninterface GeoChartData extends Partial<ChartLayoutProps> {\n  data?: ReportMetric<LocationDatasetItem>;\n  onCountrySelected?: (countryCode: string | undefined) => void;\n  country?: string;\n}\nexport function GeoChart({\n  data: metricData,\n  isLoading,\n  onCountrySelected,\n  country,\n  ...layoutProps\n}: GeoChartData) {\n  const placeholderRef = useRef<HTMLDivElement>(null);\n  const regionInteractivity = !!onCountrySelected;\n\n  // memo data to avoid redrawing chart on rerender\n  const initialData = metricData?.datasets[0].data;\n  const data = useMemo(() => {\n    return initialData || [];\n  }, [initialData]);\n  useGoogleGeoChart({placeholderRef, data, country, onCountrySelected});\n\n  return (\n    <ChartLayout\n      {...layoutProps}\n      className=\"min-w-500\"\n      title={\n        <div className=\"flex items-center\">\n          <Trans message=\"Top Locations\" />\n          {country ? (\n            <span className=\"pl-4\">\n              ({<FormattedCountryName code={country} />})\n            </span>\n          ) : null}\n          {regionInteractivity && <InfoTrigger />}\n        </div>\n      }\n      contentIsFlex={isLoading}\n    >\n      {isLoading && <ChartLoadingIndicator />}\n      <div className=\"flex gap-24\">\n        <div\n          ref={placeholderRef}\n          className=\"flex-auto w-[480px] min-h-[340px]\"\n        />\n        <div className=\"w-[170px]\">\n          <div className=\"text-sm max-h-[340px] w-full flex-initial overflow-y-auto\">\n            {data.map(location => (\n              <div\n                key={location.label}\n                className={clsx(\n                  'flex items-center gap-4 mb-4',\n                  regionInteractivity && 'cursor-pointer hover:underline'\n                )}\n                role={regionInteractivity ? 'button' : undefined}\n                onClick={() => {\n                  onCountrySelected?.(location.code);\n                }}\n              >\n                <div className=\"max-w-110 whitespace-nowrap overflow-hidden overflow-ellipsis\">\n                  {location.label}\n                </div>\n                <div>({location.percentage})%</div>\n              </div>\n            ))}\n          </div>\n          {country && (\n            <Button\n              variant=\"outline\"\n              size=\"xs\"\n              className=\"mt-14\"\n              startIcon={<ArrowBackIcon />}\n              onClick={() => {\n                onCountrySelected?.(undefined);\n              }}\n            >\n              <Trans message=\"Back to countries\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </ChartLayout>\n  );\n}\n\nfunction InfoTrigger() {\n  return (\n    <InfoDialogTrigger\n      title={<Trans message=\"Zooming in\" />}\n      body={\n        <Trans message=\"Click on a country inside the map or country list to zoom in and see city data for that country.\" />\n      }\n    />\n  );\n}\n","import React, {Fragment} from 'react';\nimport {LineChart} from '@common/charts/line-chart';\nimport {Trans} from '@common/i18n/trans';\nimport {PolarAreaChart} from '@common/charts/polar-area-chart';\nimport {BarChart} from '@common/charts/bar-chart';\nimport {VisitorsReportData} from '@common/admin/analytics/visitors-report-data';\nimport {FormattedNumber} from '@common/i18n/formatted-number';\nimport {GeoChart} from '@common/admin/analytics/geo-chart/geo-chart';\n\nexport const AdminReportPageColGap = 'gap-12 md:gap-24 mb-12 md:mb-24';\nconst rowClassName = `flex flex-col md:flex-row md:items-center overflow-x-auto ${AdminReportPageColGap}`;\n\ninterface AdminReportChartsProps {\n  report?: VisitorsReportData;\n  isLoading: boolean;\n}\nexport function VisitorsReportCharts({\n  report,\n  isLoading,\n}: AdminReportChartsProps) {\n  const totalViews = report?.pageViews.total;\n  return (\n    <Fragment>\n      <div className={rowClassName}>\n        <LineChart\n          isLoading={isLoading}\n          className=\"flex-auto\"\n          data={report?.pageViews}\n          title={<Trans message=\"Pageviews\" />}\n          description={\n            totalViews ? (\n              <Trans\n                message=\":count total views\"\n                values={{count: <FormattedNumber value={totalViews} />}}\n              />\n            ) : null\n          }\n        />\n        <PolarAreaChart\n          isLoading={isLoading}\n          data={report?.devices}\n          title={<Trans message=\"Top devices\" />}\n        />\n      </div>\n      <div className={rowClassName}>\n        <BarChart\n          isLoading={isLoading}\n          data={report?.browsers}\n          className=\"flex-auto md:w-1/3\"\n          direction=\"horizontal\"\n          individualBarColors\n          hideLegend\n          title={<Trans message=\"Top browsers\" />}\n        />\n        <GeoChart\n          isLoading={isLoading}\n          className=\"flex-auto\"\n          data={report?.locations}\n          title={<Trans message=\"Top locations\" />}\n        />\n      </div>\n    </Fragment>\n  );\n}\n","import {HeaderDatum} from '@common/admin/analytics/use-admin-report';\nimport React, {Fragment, ReactElement} from 'react';\nimport {TrendingUpIcon} from '@common/icons/material/TrendingUp';\nimport {TrendingDownIcon} from '@common/icons/material/TrendingDown';\nimport {createSvgIconFromTree} from '@common/icons/create-svg-icon';\nimport {AdminReportPageColGap} from '@common/admin/analytics/visitors-report-charts';\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\nimport {FormattedDateTimeRange} from '@common/i18n/formatted-date-time-range';\nimport {FormattedNumber} from '@common/i18n/formatted-number';\nimport {FormattedBytes} from '@common/uploads/formatted-bytes';\nimport {TrendingFlatIcon} from '@common/icons/material/TrendingFlat';\n\ninterface AdminHeaderReportProps {\n  report?: HeaderDatum[];\n  dateRange: DateRangeValue;\n}\nexport function AdminHeaderReport({report, dateRange}: AdminHeaderReportProps) {\n  const label = (\n    <FormattedDateTimeRange start={dateRange.start} end={dateRange.end} />\n  );\n\n  return (\n    <div\n      className={`flex items-center flex-shrink-0 overflow-x-auto h-[97px] ${AdminReportPageColGap}`}\n    >\n      {report?.map(datum => (\n        <ValueMetricItem key={datum.name} datum={datum} />\n      ))}\n    </div>\n  );\n}\n\ninterface ValueMetricItemProps {\n  datum: HeaderDatum;\n  label?: ReactElement;\n}\nfunction ValueMetricItem({datum, label}: ValueMetricItemProps) {\n  const Icon = createSvgIconFromTree(datum.icon);\n\n  return (\n    <div\n      key={datum.name}\n      className=\"flex items-center flex-auto rounded border p-20 gap-18 h-full whitespace-nowrap\"\n    >\n      <div className=\"bg-primary-light/20 rounded-lg p-10 flex-shrink-0\">\n        <Icon size=\"lg\" className=\"text-primary\" />\n      </div>\n      <div className=\"flex-auto\">\n        <div className=\"flex items-center gap-20 justify-between\">\n          <div className=\"text-main text-lg font-bold\">\n            {datum.type === 'fileSize' ? (\n              <FormattedBytes bytes={datum.currentValue} />\n            ) : (\n              <FormattedNumber value={datum.currentValue} />\n            )}\n          </div>\n          {label && <div className=\"text-xs text-muted ml-auto\">{label}</div>}\n        </div>\n        <div className=\"flex items-center gap-20 justify-between\">\n          <h2 className=\"text-muted text-sm\">{datum.name}</h2>\n          {datum.percentageChange != null && (\n            <div className=\"flex items-center gap-10\">\n              <TrendingIndicator percentage={datum.percentageChange} />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface TrendingIndicatorProps {\n  percentage: number;\n}\n\nfunction TrendingIndicator({percentage}: TrendingIndicatorProps) {\n  let icon: ReactElement;\n  if (percentage > 0) {\n    icon = <TrendingUpIcon size=\"md\" className=\"text-positive\" />;\n  } else if (percentage === 0) {\n    icon = <TrendingFlatIcon className=\"text-muted\" />;\n  } else {\n    icon = <TrendingDownIcon className=\"text-danger\" />;\n  }\n\n  return (\n    <Fragment>\n      {icon}\n      <div className=\"text-sm font-semibold text-muted\">{percentage}%</div>\n    </Fragment>\n  );\n}\n","import {useDateRangePickerState} from '@common/ui/forms/input-field/date/date-range-picker/use-date-range-picker-state';\nimport {DialogTrigger} from '@common/ui/overlays/dialog/dialog-trigger';\nimport {Button} from '@common/ui/buttons/button';\nimport {DateRangeIcon} from '@common/icons/material/DateRange';\nimport {FormattedDateTimeRange} from '@common/i18n/formatted-date-time-range';\nimport {DateRangeDialog} from '@common/ui/forms/input-field/date/date-range-picker/dialog/date-range-dialog';\nimport React from 'react';\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\nimport {useIsMobileMediaQuery} from '@common/utils/hooks/is-mobile-media-query';\nimport {DateFormatPresets} from '@common/i18n/formatted-date';\n\nconst monthDayFormat: Intl.DateTimeFormatOptions = {\n  month: 'short',\n  day: '2-digit',\n};\n\ninterface ReportDataSelectorProps {\n  value: DateRangeValue;\n  onChange: (value: DateRangeValue) => void;\n  compactOnMobile?: boolean;\n}\nexport function ReportDateSelector({\n  value,\n  onChange,\n  compactOnMobile = true,\n}: ReportDataSelectorProps) {\n  const isMobile = useIsMobileMediaQuery();\n  return (\n    <DialogTrigger\n      type=\"popover\"\n      onClose={value => {\n        if (value) {\n          onChange(value);\n        }\n      }}\n    >\n      <Button variant=\"outline\" color=\"chip\" endIcon={<DateRangeIcon />}>\n        <FormattedDateTimeRange\n          start={value.start}\n          end={value.end}\n          options={\n            isMobile && compactOnMobile\n              ? monthDayFormat\n              : DateFormatPresets.short\n          }\n        />\n      </Button>\n      <DateSelectorDialog value={value} />\n    </DialogTrigger>\n  );\n}\n\ninterface DateSelectorDialogProps {\n  value: DateRangeValue;\n}\nfunction DateSelectorDialog({value}: DateSelectorDialogProps) {\n  const isMobile = useIsMobileMediaQuery();\n  const state = useDateRangePickerState({\n    defaultValue: value,\n    closeDialogOnSelection: false,\n  });\n  return (\n    <DateRangeDialog state={state} showInlineDatePickerField={!isMobile} />\n  );\n}\n","import React, {useState} from 'react';\nimport {useAdminReport} from './use-admin-report';\nimport {Trans} from '../../i18n/trans';\nimport {StaticPageTitle} from '../../seo/static-page-title';\nimport {AdminHeaderReport} from '@common/admin/analytics/admin-header-report';\nimport {VisitorsReportCharts} from '@common/admin/analytics/visitors-report-charts';\nimport {DateRangeValue} from '@common/ui/forms/input-field/date/date-range-picker/date-range-value';\nimport {DateRangePresets} from '@common/ui/forms/input-field/date/date-range-picker/dialog/date-range-presets';\nimport {ReportDateSelector} from '@common/admin/analytics/report-date-selector';\n\nexport default function AdminReportPage() {\n  const [dateRange, setDateRange] = useState<DateRangeValue>(() => {\n    // This week\n    return DateRangePresets[2].getRangeValue();\n  });\n  const {isLoading, data} = useAdminReport({dateRange});\n  const title = <Trans message=\"Visitors report\" />;\n\n  return (\n    <div className=\"min-h-full gap-12 md:gap-24 p-12 md:p-24 overflow-x-hidden\">\n      <div className=\"md:flex items-center justify-between gap-24 mb-24\">\n        <StaticPageTitle>{title}</StaticPageTitle>\n        <h1 className=\"mb-24 md:mb-0 text-3xl font-light\">{title}</h1>\n        <ReportDateSelector value={dateRange} onChange={setDateRange} />\n      </div>\n      <AdminHeaderReport report={data?.headerReport} dateRange={dateRange} />\n      <VisitorsReportCharts\n        report={data?.visitorsReport}\n        isLoading={isLoading}\n      />\n    </div>\n  );\n}\n"],"file":"assets/admin-report-page.85e8c7b3.js"}